package cmd

import (
	"bugless/shared"
	"io"
	"log"
	"os"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/spf13/cobra"
)

var exploitCmd = &cobra.Command{
	Use:   "exploit",
	Short: "Send a exploit for a bounty",
	Run:   exploitRun,
}

var (
	exploitName       string
	exploitImgLink    string
	exploitAppAddress string
	exploitPath       string
)

func exploitRun(cmd *cobra.Command, args []string) {
	appAddress, err := hexutil.Decode(exploitAppAddress)
	if err != nil {
		log.Fatalf("failed to decode address: %v", err)
	}
	input := &shared.SendExploit{
		Name:       exploitName,
		ImgLink:    exploitImgLink,
		AppAddress: common.Address(appAddress),
		Exploit:    exploitLoad(),
	}
	sendInput(input)
}

func exploitLoad() string {
	f, err := os.Open(bountyCodePath)
	if err != nil {
		log.Fatalf("failed to open exploit file: %v", err)
	}
	defer f.Close()
	bytes, err := io.ReadAll(f)
	if err != nil {
		log.Fatalf("failed read exploit file: %v", err)
	}

	return string(bytes)
}

func init() {
	sendCmd.AddCommand(exploitCmd)

	exploitCmd.Flags().StringVarP(
		&exploitName, "name", "n", "", "Sponsor name")
	exploitCmd.MarkFlagRequired("name")

	exploitCmd.Flags().StringVarP(
		&exploitImgLink, "image", "i", "", "Sponsor image")
	exploitCmd.MarkFlagRequired("image")

	exploitCmd.Flags().StringVarP(
		&exploitAppAddress, "app-address", "a", "", "Address of the app bounty")
	exploitCmd.MarkFlagRequired("app-address")

	exploitCmd.Flags().StringVarP(
		&bountyCodePath, "exploit", "e", "", "Path to the exploit file")
	exploitCmd.MarkFlagRequired("exploit")
}
