"use client";
import { FC, useState, useRef, useEffect } from "react";

import {
    Box,
    Button,
    Center,
    Group,
    Stack,
    TextInput,
    Textarea,
    useMantineTheme,
    Text,
} from "@mantine/core";
import { Dropzone, FileWithPath } from "@mantine/dropzone";
import { TbExclamationCircle, TbUpload } from "react-icons/tb";

import { Address, bytesToHex, toHex, Hex } from "viem";
import { useWaitForTransaction } from "wagmi";
import { SendExploit } from "../../../../model/inputs";
import { usePrepareSendExploit } from "../../../../hooks/bugless";
import { useInputBoxAddInput } from "../../../../hooks/contracts";

import { BountyParams, InvalidBountyId } from "../utils.tsx";

const SendExploitPage: FC<BountyParams> = ({ params: { bountyId } }) => {
    const dapp = process.env.NEXT_PUBLIC_DAPP_ADDRESS as Address;
    const theme = useMantineTheme();

    const bountyIndex = Number(bountyId);

    if (isNaN(bountyIndex)) {
        return <InvalidBountyId />;
    }

    // App name
    const [name, setName] = useState("");

    // ImgLink
    const [imgLink, setImgLink] = useState("");

    const [exploitFile, setExploitFile] = useState<string | null>(null);

    const readFile = (f: FileWithPath | null) => {
        if (f) {
            f.arrayBuffer().then((buf) => {
                //setAppFile(bytesToHex(new Uint8Array(buf)));
                setExploitFile(
                    btoa(
                        Array.from(new Uint8Array(buf))
                            .map((b) => String.fromCharCode(b))
                            .join(""),
                    ),
                );
            });
        }
    };

    const exploit = {
        Name: name,
        ImgLink: imgLink,
        BountyIndex: bountyIndex,
        Exploit: exploitFile,
    } as SendExploit;

    const config = usePrepareSendExploit(exploit);

    const { data, isLoading, isSuccess, write } = useInputBoxAddInput(config);
    const wait = useWaitForTransaction(data);

    function submit() {
        if (write) write();
    }

    return (
        <Center>
            <Box p={20} mt={180} bg={theme.colors.dark[7]}>
                <Stack w={600}>
                    <TextInput
                        withAsterisk
                        size="lg"
                        label="Name"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        description="Hacker name"
                    />

                    <TextInput
                        size="lg"
                        label="Image Link"
                        value={imgLink}
                        onChange={(e) => setImgLink(e.target.value)}
                        description="App Image Link"
                    />

                    <Group justify="space-between" w="100%">
                        <Dropzone
                            onDrop={(files) => readFile(files[0])}
                            onReject={(files) =>
                                console.log("rejected files", files)
                            }
                            //maxSize={3 * 1024 ** 2}
                        >
                            <Group
                                justify="center"
                                gap="xl"
                                mih={220}
                                style={{ pointerEvents: "none" }}
                            >
                                <Dropzone.Accept>
                                    <TbUpload size={60} />
                                </Dropzone.Accept>
                                <Dropzone.Reject>
                                    <TbExclamationCircle size={60} />
                                </Dropzone.Reject>
                                <Dropzone.Idle>
                                    <TbUpload size={60} />
                                </Dropzone.Idle>

                                <div>
                                    <Text size="xl" inline>
                                        Drag Exploit script file here or click
                                        to select file
                                    </Text>
                                    <Text size="sm" c="dimmed" inline mt={7}>
                                        Attach a single script to exploit the
                                        App
                                    </Text>
                                </div>
                            </Group>
                        </Dropzone>
                    </Group>

                    <Group justify="center" mt="md">
                        <Button
                            size="lg"
                            type="submit"
                            disabled={
                                !write ||
                                !exploitFile ||
                                name.trim().length === 0
                            }
                            onClick={submit}
                        >
                            {"Submit Exploit"}
                        </Button>
                    </Group>
                </Stack>
            </Box>
        </Center>
    );
};

export default SendExploitPage;
