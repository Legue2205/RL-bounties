"use client";
import { FC, useState, useRef, useEffect } from "react";

import {
    Box,
    Button,
    Center,
    Group,
    Stack,
    TextInput,
    Textarea,
    useMantineTheme,
    Title,
    Text,
    Paper,
    Tabs,
} from "@mantine/core";
import { Dropzone, FileWithPath } from "@mantine/dropzone";
import { TbExclamationCircle, TbUpload } from "react-icons/tb";

import { Address, bytesToHex, toHex, Hex } from "viem";
import { useWaitForTransaction } from "wagmi";
import { SendExploit } from "../../../../model/inputs";
import { usePrepareSendExploit } from "../../../../hooks/bugless";
import { useInputBoxAddInput } from "../../../../hooks/contracts";

import { BountyParams, InvalidBountyId } from "../utils.tsx";
import { GetBounty } from "../../../../model/reader";

const SendExploitPage: FC<BountyParams> = ({ params: { bountyId } }) => {
    const dapp = process.env.NEXT_PUBLIC_DAPP_ADDRESS as Address;
    const theme = useMantineTheme();

    const [name, setName] = useState("");
    const [imgLink, setImgLink] = useState("");
    const [testStatus, setTestStatus] = useState("");
    const [exploitFile, setExploitFile] = useState<string | null>(null);
    const [dropText, setDropText] = useState("No file attached yet");

    const readFile = (f: FileWithPath | null) => {
        if (f) {
            f.arrayBuffer().then((buf) => {
                //setAppFile(bytesToHex(new Uint8Array(buf)));
                setExploitFile(
                    btoa(
                        Array.from(new Uint8Array(buf))
                            .map((b) => String.fromCharCode(b))
                            .join(""),
                    ),
                );
                setDropText(f.name);
            });
        }
    };

    // Test an exploit
    async function TestExploit(bountyIndex: number, exploit: string) {
        const json = { BountyIndex: bountyIndex, Exploit: exploit };
        setTestStatus("Testing..");
        let buffer = Buffer.concat([
            new Buffer([0x18, 0xcc, 0x70, 0xaf]),
            Buffer.from(JSON.stringify(json)),
        ]);
        const response = await fetch("http://localhost:8080/inspect", {
            method: "POST",
            headers: {
                "Content-Type": "application/octet-stream",
            },
            body: buffer,
        });
        const body = await response.json();
        if (body.status == "Accepted") {
            setTestStatus("Exploit test succeeded!");
        } else {
            let status = "";
            body.reports.forEach((report: any) => {
                const text = Buffer.from(
                    report.payload.substring(2),
                    "hex",
                ).toString("ascii", 1);
                status = status + text;
            });
            setTestStatus(status);
        }
    }

    const bountyIndex = Number(bountyId);

    const testExploit = () => {
        TestExploit(bountyIndex, exploitFile!);
    };

    const exploit = {
        Name: name,
        ImgLink: imgLink,
        BountyIndex: bountyIndex,
        Exploit: exploitFile,
    } as SendExploit;

    const config = usePrepareSendExploit(exploit);

    const { data, write } = useInputBoxAddInput(config);
    const { isLoading, isSuccess } = useWaitForTransaction({
        hash: data?.hash,
    });

    if (isNaN(bountyIndex)) {
        return <InvalidBountyId />;
    }

    const result = GetBounty(bountyIndex);

    return (
        <Center>
            <Box p={20} mt={50} bg={theme.colors.dark[7]}>
                <Stack w={800}>
                    <Title size="h1">Submit bounty exploit</Title>
                    {result.kind == "success" && (
                        <Text size="lg" fw={700} c="dimmed">
                            {result.response.Developer.Name}
                        </Text>
                    )}
                    <TextInput
                        withAsterisk
                        size="lg"
                        label="Name"
                        value={name}
                        placeholder="Hacker"
                        onChange={(e) => setName(e.target.value)}
                    />

                    <TextInput
                        size="lg"
                        label="Avatar URL"
                        value={imgLink}
                        placeholder="https://"
                        onChange={(e) => setImgLink(e.target.value)}
                    />

                    <Tabs defaultValue="script">
                        <Tabs.List>
                            <Tabs.Tab value="script">Script</Tabs.Tab>
                            <Tabs.Tab value="file">File</Tabs.Tab>
                        </Tabs.List>

                        <Tabs.Panel value="script">
                            <Textarea
                                autosize
                                minRows={10}
                                maxRows={40}
                                multiline={true}
                                styles={{ input: { fontFamily: "monospace" } }}
                                placeholder="Exploit code"
                                onChange={(e) =>
                                    setExploitFile(btoa(e.target.value))
                                }
                            />
                        </Tabs.Panel>

                        <Tabs.Panel value="file">
                            <Paper withBorder shadow="sm" radius="sm">
                                <Dropzone
                                    onDrop={(files) => readFile(files[0])}
                                >
                                    <Group
                                        justify="left"
                                        gap="xl"
                                        ml={20}
                                        mih={120}
                                        style={{ pointerEvents: "none" }}
                                    >
                                        <Dropzone.Accept>
                                            <TbUpload size={60} />
                                        </Dropzone.Accept>
                                        <Dropzone.Reject>
                                            <TbExclamationCircle size={60} />
                                        </Dropzone.Reject>
                                        <Dropzone.Idle>
                                            <TbUpload size={60} />
                                        </Dropzone.Idle>

                                        <div>
                                            <Text size="xl" inline>
                                                Drag exploit script file here or
                                                click to select file
                                            </Text>
                                            <Text
                                                size="md"
                                                fw={700}
                                                c="dimmed"
                                                inline
                                                mt={7}
                                            >
                                                {dropText}
                                            </Text>
                                        </div>
                                    </Group>
                                </Dropzone>
                            </Paper>
                        </Tabs.Panel>
                    </Tabs>

                    {testStatus && (
                        <Paper
                            withBorder
                            radius="sm"
                            p={4}
                            styles={{
                                root: {
                                    backgroundColor: "black",
                                    color: "white",
                                },
                            }}
                        >
                            <Text
                                styles={{
                                    root: {
                                        backgroundColor: "black",
                                        color: "white",
                                        whiteSpace: "pre-wrap",
                                        fontFamily: "monospace",
                                    },
                                }}
                            >
                                {testStatus}
                            </Text>
                        </Paper>
                    )}

                    <Group justify="center" mt="md">
                        <Button
                            size="lg"
                            type="submit"
                            disabled={
                                !write ||
                                !exploitFile ||
                                isLoading ||
                                name.trim().length === 0
                            }
                            onClick={write}
                        >
                            {isLoading
                                ? "Submitting Exploit.."
                                : "Submit Exploit"}
                        </Button>
                        <Button
                            size="lg"
                            type="submit"
                            disabled={!exploitFile}
                            onClick={testExploit}
                        >
                            Test Exploit
                        </Button>
                    </Group>
                    {isSuccess && (
                        <>
                            <Group justify="center">
                                <Text size="lg">
                                    Submit Exploit transaction successful!
                                </Text>
                            </Group>
                        </>
                    )}
                </Stack>
            </Box>
        </Center>
    );
};

export default SendExploitPage;
